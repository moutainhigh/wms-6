<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cxf="http://cxf.apache.org/core"
	xmlns:p="http://cxf.apache.org/policy" xmlns:ss="http://www.springframework.org/schema/security"
	xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:rws="http://code.cn.dx.com/schema/spring/rws"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
   	http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd
   	http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
   	http://cxf.apache.org/policy http://cxf.apache.org/schemas/policy.xsd
   	http://cxf.apache.org/bindings/soap http://cxf.apache.org/schemas/configuration/soap.xsd
   	http://code.cn.dx.com/schema/spring/rws http://code.cn.dx.com/schema/spring/rws.xsd
   	http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
   	http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd
   	http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
   	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
   	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- spring的属性加载器，加载properties文件中的属性 -->
	<bean class="com.gagu.ucm.agent.venus.placeholder.VenusPropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:/application.properties</value>
			</list>
		</property>
	</bean> 

	<context:component-scan base-package="com.dx.wms,com.dx.cms,com.dx.op,com.dx.cmm" />
	<context:annotation-config />
	<!-- DAL客户端接口实现 -->
	<bean id="dalClient" class="com.dx.framework.dal.client.support.PaginationDalClient">
		<!-- SQL的Xml配置路径 -->
		<property name="resources" value="classpath*:META-INF/sqlMap/sqlMap_*.xml" />

		<!-- 定义默义的数据源 （可以指定原生数据源或读写分离数据源） -->
		<property name="defaultDataSource" ref="groupDataSourceOne" />
	</bean>

	<!-- 数据库信息配置加载 -->
	<bean id="dataSourceOne" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${component.dbcp.mysql.driverClassname}" />
		<property name="url" value="${dx.wmsdubbo.ds.url}" />
		<property name="username" value="${dx.wmsdubbo.ds.username}" />
		<property name="password" value="${dx.wmsdubbo.ds.password}" />
		<!--initialSize: 初始化连接 -->
		<property name="initialSize" value="${dx.wmsdubbo.ds.initialSize}" />
		<!--maxIdle: 最大空闲连接 -->
		<property name="maxIdle" value="${dx.wmsdubbo.ds.maxIdle}" />
		<!--minIdle: 最小空闲连接 -->
		<property name="minIdle" value="${dx.wmsdubbo.ds.minIdle}" />
		<!--maxActive: 最大连接数量 -->
		<property name="maxActive" value="${dx.wmsdubbo.ds.maxActive}" />
		<!--removeAbandoned: 是否自动回收超时连接 -->
		<property name="removeAbandoned" value="${component.dbcp.removeAbandoned}" />
		<!--removeAbandonedTimeout: 超时时间(以秒数为单位) -->
		<property name="removeAbandonedTimeout" value="${component.dbcp.removeAbandonedTimeout}" />
		<!--maxWait: 超时等待时间以毫秒为单位 6000毫秒/1000等于60秒 -->
		<property name="maxWait" value="${component.dbcp.maxWait}" />
		<property name="testWhileIdle" value="${component.dbcp.testWhileIdle}" />
		<property name="testOnBorrow" value="${component.dbcp.testOnBorrow}" />
		<property name="validationQuery">
			<value>${component.dbcp.validationQuery}</value>
		</property>
	</bean>

	<!-- 读写分离数据源1 -->
	<bean id="groupDataSourceOne" class="com.dx.framework.dal.group.GroupDataSource">
		<property name="dataSourceGroup" ref="dsGroupOne"></property>
	</bean>

	<!-- 读写分离数据源分组1 -->
	<rws:ds_group id="dsGroupOne">
		<!-- 写数据库 -->
		<rws:wr_ds name="master" ref="dataSourceOne" type="mysql" />
		<!-- 读数据库 -->
		<rws:ro_ds name="slave1" ref="dataSourceOne" weight="100"
			type="mysql" />
		<!-- <rws:ro_ds name="数据源名称" ref="数据源" weight="权重" type="哪 类数据库" /> -->
	</rws:ds_group>

	<bean id="mysqlDialect" class="com.dx.framework.dal.dialect.impl.MySQLDialect" />
	<bean id="dialectFactory" class="com.dx.framework.dal.dialect.DialectFactory">
		<property name="mapDialect">
			<map>
				<entry key="mysql">
					<ref bean="mysqlDialect" />
				</entry>
			</map>
		</property>
	</bean>

	<!-- 事务管理器 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourceOne" />
	</bean>

	<!-- 定义事务管理拦截器 -->
	<bean id="transactionInterceptor"
		class="com.dx.framework.dal.transaction.advisor.TransactionInterceptor">
		<!-- 定义数据源的路由配置 -->
		<property name="dalClient" ref="dalClient" />
	</bean>

	<!-- 定义bean自动代理容器 -->
	<bean
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="interceptorNames">
			<list>
				<!-- 配置拦截器 -->
				<value>transactionInterceptor</value>
			</list>
		</property>
		<property name="beanNames">
			<list>
				<!-- 需要拦截serivce的beanName,支持通配 -->
				<value>*ServiceImpl</value>
			</list>
		</property>
		<!-- 根据Target类型动态使用代理技术(proxy与cglib) -->
		<property name="proxyTargetClass" value="true" />
		<!-- 暴露代理对象，可以使用AopContext -->
		<property name="exposeProxy" value="true" />
	</bean>
	
	
	<!-- 省市区处理服务 2016-03-04 add by Steel -->
	<import resource="classpath:applicationContext-constantcode.xml" />
	<bean id="regionService" class="com.dx.framework.constant.impl.RegionNewServiceImpl" />
	
	<!-- 加入缓存配置 -->
	<import resource="classpath:META-INF/spring/wms-caches.xml" />

	<!-- 加入异常处理和日志输出 -->
	<import resource="classpath*:conf/exception/appContext-exception.xml" />

	<!-- 定义异常处理机制 -->
	<aop:config>
		<aop:pointcut id="exceptionLogPointcut" expression="execution(public * com.dx..*(..))" />
	</aop:config>


</beans>
